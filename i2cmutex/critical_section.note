/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
        /* Disable interrupts as per portDISABLE_INTERRUPTS();                                                  */
        asm volatile (
                "STMDB  SP!, {R0}                       \n\t"   /* Push R0.                                                             */
                "MRS    R0, CPSR                        \n\t"   /* Get CPSR.                                                    */
                "ORR    R0, R0, #0xC0           \n\t"   /* Disable IRQ, FIQ.                                    */
                "MSR    CPSR, R0                        \n\t"   /* Write back modified value.                   */
                "LDMIA  SP!, {R0}" );                           /* Pop R0.                                                              */

        /* Now interrupts are disabled ulCriticalNesting can be accessed 
        directly.  Increment ulCriticalNesting to keep a count of how many times
        portENTER_CRITICAL() has been called. */
        ulCriticalNesting++;
}

void vPortExitCritical( void )
{
        if( ulCriticalNesting > portNO_CRITICAL_NE
